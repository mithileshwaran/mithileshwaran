#include <stdio.h>
#include <string.h>
// Function to convert three-address code to 8086 assembly language
void generateAssembly(char* tac) {
 char op, var1, var2, result;
 int num1, num2;
 // Parse TAC in the format: result = var1 op var2
 if (sscanf(tac, "%c = %c %c %c", &result, &var1, &op, &var2) == 4) {
 // Generate 8086 assembly code
 switch(op) {
 case '+':
 printf("MOV AL, %c\n", var1); // Move var1 into AL
 printf("ADD AL, %c\n", var2); // Add var2 to AL
 printf("MOV %c, AL\n", result); // Store result in 'result'
 break;
 case '-':
 printf("MOV AL, %c\n", var1); // Move var1 into AL
 printf("SUB AL, %c\n", var2); // Subtract var2 from AL
 printf("MOV %c, AL\n", result); // Store result in 'result'
 break;
 case '*':
 printf("MOV AL, %c\n", var1); // Move var1 into AL
 printf("MUL %c\n", var2); // Multiply AL by var2
 printf("MOV %c, AL\n", result); // Store result in 'result'
 break;
 case '/':
 printf("MOV AL, %c\n", var1); // Move var1 into AL
 printf("DIV %c\n", var2); // Divide AL by var2
 printf("MOV %c, AL\n", result); // Store result in 'result'
 break;
 default:
 printf("Invalid operator!\n");
 }
 } else {
 printf("Invalid TAC format!\n");
 }
}
int main() {
 char tac[100];
 // Input TAC (Three-Address Code) example: "A = B + C"
 printf("Enter the Three-Address Code (e.g., A = B + C):\n");
 fgets(tac, sizeof(tac), stdin); // Read input TAC
 // Generate corresponding 8086 assembly
 generateAssembly(tac);
return 0;

}
