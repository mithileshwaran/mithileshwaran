import java.math.BigInteger;
import java.security.SecureRandom;

public class RSA {

    private BigInteger n, d, e;
    private int bitlen = 2048;

    public RSA() {
        SecureRandom rand = new SecureRandom();
        BigInteger p = BigInteger.probablePrime(bitlen / 2, rand);
        BigInteger q = BigInteger.probablePrime(bitlen / 2, rand);

       
        n = p.multiply(q);

      
        BigInteger phi = (p.subtract(BigInteger.ONE)).multiply(q.subtract(BigInteger.ONE));

     
        e = BigInteger.valueOf(65537);
        d = e.modInverse(phi);
    }

 
    public BigInteger encrypt(BigInteger plaintext) {
        return plaintext.modPow(e, n);
    }

   
    public BigInteger decrypt(BigInteger ciphertext) {
        return ciphertext.modPow(d, n);
    }

    public static void main(String[] args) {
        RSA rsa = new RSA();


        String plaintext = "Hello, RSA!";
        BigInteger plaintextBigInt = new BigInteger(plaintext.getBytes());

     
        BigInteger ciphertext = rsa.encrypt(plaintextBigInt);
        System.out.println("Ciphertext: " + ciphertext);

       
        BigInteger decryptedText = rsa.decrypt(ciphertext);
        String decryptedString = new String(decryptedText.toByteArray());
        System.out.println("Decrypted: " + decryptedString);
    }
}
